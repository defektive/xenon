#! /bin/bash
######################################################################
##x```
##|
##|  ▄       ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄        ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄        ▄
##| ▐░▌     ▐░▌▐░░░░░░░░░░░▌▐░░▌      ▐░▌▐░░░░░░░░░░░▌▐░░▌      ▐░▌
##|  ▐░▌   ▐░▌ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌░▌     ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌░▌     ▐░▌
##|   ▐░▌ ▐░▌  ▐░▌          ▐░▌▐░▌    ▐░▌▐░▌       ▐░▌▐░▌▐░▌    ▐░▌
##|    ▐░▐░▌   ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌ ▐░▌   ▐░▌▐░▌       ▐░▌▐░▌ ▐░▌   ▐░▌
##|     ▐░▌    ▐░░░░░░░░░░░▌▐░▌  ▐░▌  ▐░▌▐░▌       ▐░▌▐░▌  ▐░▌  ▐░▌
##|    ▐░▌░▌   ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌   ▐░▌ ▐░▌▐░▌       ▐░▌▐░▌   ▐░▌ ▐░▌
##|   ▐░▌ ▐░▌  ▐░▌          ▐░▌    ▐░▌▐░▌▐░▌       ▐░▌▐░▌    ▐░▌▐░▌
##|  ▐░▌   ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌     ▐░▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌     ▐░▐░▌
##| ▐░▌     ▐░▌▐░░░░░░░░░░░▌▐░▌      ▐░░▌▐░░░░░░░░░░░▌▐░▌      ▐░░▌
##|  ▀       ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀        ▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀        ▀▀
##x```
##|--------------------------------------------------------------------
##x## What is xenon?
##x
##x Xenon (`xe`) is a tool to assist in organizing pentest data.
##x
##x ![Screenshot](assets/screenshot-2017-11-05-03-31am.png)
##x
##| `xe` uses the following emoji 🏴 🎃 💀 🐚 🔑 📄
##| If you can't see them you should install an emoji font
##x
##|--------------------------------------------------------------------
##|## Actions
##--------------------------------------------------------------------
# .
# ├── hosts
# │   └── 127.0.0.1
# │       ├── loot
# │       │   └── passwords
# │       └── recon
# ├── recon
# ├── README.md
# └── scope-ips.txt
#
# 5 directories, 2 files
##|### Print info
##|  |#|xe [info] [-q host_query]|#|
##|  Print out an overall summary of hosts/networks discovered
##x
function info_action {
  echo ---------------------------------------------------------------------
  ls $XENON_HOST_ROOT | _print_host_table "$SEARCH" | column -t
  echo ---------------------------------------------------------------------
  echo Pwnd $(find $XENON_HOST_ROOT -name proof.txt | wc -l)/$(find $XENON_HOST_ROOT -maxdepth 1 -type d | tail -n +2 | wc -l)
}

##
##|### Create host
##|  |#|xe -Nh hostname|#|
##|  Create the following directory structure in the $XENON_HOST_ROOT directory
##|    $XENON_HOST_ROOT
##|    └── hostname
##|        ├── loot
##|        │   └── passwords
##|        └── recon
##x
function create_host_action {
  mkdir -p $XENON_HOST_ROOT/$HOSTNAME/loot/passwords $XENON_HOST_ROOT/$HOSTNAME/recon
}

##
##|### Create op
##|  |#|xe -No opname|#|
##|  Create the following directory structure in the $XENON_OPS_ROOT directory
##|    $XENON_OPS_ROOT
##|    └── opname
##|        ├── apps
##|        ├── docs
##|        ├── findings
##|        ├── hosts
##|        ├── recon
##|        ├── README.md
##|        └── scope-ips.txt
##x
function create_op_action {
  mkdir -p $XENON_OPS_ROOT/$OPNAME/{recon,hosts,docs,apps,findings}
  touch $XENON_OPS_ROOT/$OPNAME/scope-ips.txt
  echo "# $OPNAME" > $XENON_OPS_ROOT/$OPNAME/README.md
}

##
##|### List ops
##|  |#|xe ops|#|
##|  List all ops in the $XENON_OPS_ROOT directory
##x
function ops_action {
  ls $XENON_OPS_ROOT | column -t
}

##
##|### Search
##|  |#|xe search -q pattern(s)|#|
##|  Search for pattern(s) within all files for each host. The host info will
##|  be displayed for each host that has files which match the specified pattern(s)
##x
function search_action {
  _search "$SEARCH" | _print_host_table | column -t
}

##
##|### recon
##|  rcn for pattern(s)
##x
function recon_action {

  if [ ! -d ./recon ]; then
    echo "[-] no recon dir :/"
  fi

  {

    if [ -f hostname ]; then
      name=$(cat hostname)
    else
      name=$(basename $(pwd))
    fi

    which figlet 2>&1 > /dev/null && figlet -f smslant $(echo $name|cut -d. -f1) -w 150 || echo "imagine big letters"

    echo
    {
    rhost
    if [ -f hostname ]; then
       cat hostname
    fi
    if [ -f cert-domains.txt ]; then
       cat cert-domains.txt
    fi
    } | sort -u | sed 's/^/\t/g'

    echo
    echo ---------------
    echo "## Active Checks"

    hostname_matches=0
    has_hostname=0
    if [ -f hostname ]; then
	    has_hostname=1
        if [ "$(rhost)" != "$(host $(cat hostname) | awk '{print $4}' )" ] ; then
            echo '[!] hostname does not point to this IP'
	else
	    hostname_matches=1
        fi
    fi


    user_agent="Mozilla/5.0 (X11; Linux x86_64; rv:75.0) Gecko/20100101 Firefox/75.0"
    host_header="host: localhost"
    if [ $has_hostname -eq 1 ]; then
	    host_header="host: $(cat hostname)"
    fi
    if grep 80/tcp recon/nmap-punched.nmap > /dev/null ; then
	    if [[ ! -f curl-http-$(rhost).txt || ! -s curl-http-$(rhost).txt ]] ; then
		    curl -A "$user_agent" -H "$host_header" --connect-timeout 5 -skiL http://$(rhost) > curl-http-$(rhost).txt || echo '!! http connection failed !!'
	    fi
	    echo "http://$(rhost) "
	    if [ $has_hostname -eq 1 ]; then
		    echo "http://$(cat hostname) "
	    fi
    fi

    if  grep 443/tcp recon/nmap-punched.nmap > /dev/null ; then
	    if [[ ! -f curl-https-$(rhost).txt || ! -s curl-https-$(rhost).txt ]] ; then
		    curl -A "$user_agent" -H "$host_header" --connect-timeout 5 -skiL https://$(rhost) > curl-https-$(rhost).txt || echo '!! https connection failed !!'
	    fi
	    echo "https://$(rhost) "
	    if [ $has_hostname -eq 1 ]; then
		    echo "https://$(cat hostname) "
	    fi
    fi

    echo
    echo ---------------
    echo

    if [ -f README.md ]; then
       cat README.md
    fi
    echo
    echo ---------------
    echo


    cat curl-*.txt 2>/dev/null
    echo
    echo ---------------
    echo


    shopt -s nullglob
    FILES=`echo {recon/ssh*,recon/*.nmap,recon/nikto*,recon/enum4*,loot/lp*,recon/snmp*,recon/*.out}`

    for f in $FILES; do
      echo -n '## '
      basename $f

      echo
      cat $f
      echo '----------------'
    done
    if [ -f recon/nmap-punched.xml ]; then
      which searchsploit 2>&1 >/dev/null && searchsploit --nmap recon/nmap-punched.xml || echo "install searchsploit for mor magic 🧙"
    fi
  } | less -X
}

##
##|### warp
##|  warp to host
##x
function warp_action {
  first=$(realpath $(dirname `grep -riP $QUERY $XENON_HOST_ROOT/*/*/hostname | cut -d ':' -f 1`))
  if [ -d $first ]; then
    echo $first
  fi
}


function help_action {
  if [ -z $MARKDOWN ]; then
    cat $0 | grep -v "##x" | sed 's/##|[#]\+\?/##/g' \
    | egrep -a --color=always '^##[\*#\|-]+?' \
    | GREP_COLOR='1;34' grep -a --color=always '|#|.*|#|$\|$' \
    | sed 's/|#|//g'
    exit 1
  fi

  cat $0 | egrep -a '^##[x\|]' | sed 's/##[x|]//g;s/|#|//g'
  exit 1
}

ACTION="info_action"
  ##
  ##|--------------------------------------------------------------------
  ##|## Options
  ##--------------------------------------------------------------------
while [[ $# -gt 0 ]] ; do
  key="$1"
  case $key in
    info|help|recon|ops|search)
      ACTION="${1}_action"
      ;;
    rcn)
      ACTION="recon_action"
      ;;
    -q)
      if [ ! -z "$SEARCH" ]; then
        SEARCH="$SEARCH|"
      fi
      SEARCH="$2"
      shift
      ;;
    -f)
      if [ ! -z "$FILTER" ]; then
        FILTER="$FILTER|"
      fi
      FILTER="$2"
      shift
      ;;
    -nf)
      if [ ! -z "$NFILTER" ]; then
        NFILTER="$NFILTER|"
      fi
      NFILTER="$2"
      shift
      ;;
    -n)
      # no proof
      PROOF=0
      ;;
    -Nh)
      ACTION="create_host_action"
      HOSTNAME=$2
      shift
      ;;
    -No)
      ACTION="create_op_action"
      OPNAME=$2
      shift
      ;;
    -p)
      # proof
      PROOF=1
      ;;
    -w)
      SEARCH=windows
      ;;
    -h)
      ACTION='help_action'
      ;;
    ##
    ##|### -m | --markdown
    ##x
    ##|  generate markdown (only used on the help action)
    -m | --markdown)
      MARKDOWN=1
      ;;
    warp)
      ACTION="${1}_action"
      while [[ $# -gt 0 ]] ; do
        if [ ! -z $2 ]; then
          if [ ! -z $QUERY ]; then
            QUERY="$QUERY|"
          fi
          QUERY=$QUERY'(\b'$2'\b)'
        fi
        shift
      done
      ;;
  esac
  shift # past argument or value
done

#------
# private methods

set -e

if [ -z $XENON_ROOT ]; then
  path=`pwd`
  while [[ $path != / ]]; do
    if [ -f $path/.xenon.rc ]; then
      cd $path
      source .xenon.rc
      cd - 1> /dev/null
      break
    fi
    path="$(readlink -f "$path"/..)"
  done
fi

path=`pwd`
while [[ $path != / ]]; do
  if [ -f $path/.xenon-op.rc ]; then
    cd $path
    source .xenon-op.rc
    cd - 1> /dev/null
    break
  fi
  path="$(readlink -f "$path"/..)"
done

if [ -z $XENON_HOST_ROOT ]; then
  XENON_HOST_ROOT=`pwd`/hosts
  echo defaulting XENON_HOST_ROOT to $XENON_HOST_ROOT
fi

function _row_neg_filter () {
    if [ ! -z "$NFILTER" ]; then
	grep -vP '$NFILTER'
else

	    cat
    fi
}

function _print_host_table {
    if [ ! -z "$1" ]; then
      SEARCH="$1"
    else
      SEARCH=""
    fi


    echo $row_filter
    echo "IP Hostname Proof Local Exploit Shell Passwds Docs"
    while read host; do
      host_path="$XENON_HOST_ROOT/$host"

      if [[ ! -d $host_path ]]; then
        continue
      fi
      
      hostid=$(( 100000 * `echo "$host" | cut -d. -f 1` +  10000 * `echo "$host" | cut -d. -f 2` + 1000 * `echo "$host" | cut -d. -f 3` + `echo "$host" | cut -d. -f4` ))
      hostname="-"

      [ -f $host_path/hostname ] && hostname=`cat $host_path/hostname`
      hattrs=(- - - - - -)
      [ -f $host_path/loot/proof.txt ] && hattrs[0]=🏴
      [ -f $host_path/loot/local.txt ] && hattrs[1]=🎃
      [ -f $host_path/exploit.sh ] && hattrs[2]=💀
      [ -f $host_path/shell.sh ] && hattrs[3]=🐚
      [[ -f $host_path/loot/shadow || -f $host_path/loot/ntlm || -f $host_path/loot/mimikatz || -f $host_path/loot/pwdump ]] && hattrs[4]=🔑
      [ -f $host_path/README.md ] && hattrs[5]=📄
      [ -f $host_path/NO_PORTS ] && hattrs[5]="${hattrs[5]}!"
      [ -f $host_path/BAD_SCAN ] && hattrs[5]="${hattrs[5]}?"
      [ -f $host_path/TCPWRAPPED ] && hattrs[5]="${hattrs[5]}@"

      COLOR=""
      ECHO=0
      [ -L $host_path ] && COLOR="\e[2m"
      if [ ! -z "$SEARCH" ]; then
        [ $(grep -riP $SEARCH $host_path/recon/*.nmap 2>/dev/null | wc -l ) -gt 0 ] && ECHO=1
      else
        [[ $PROOF -eq 0 && ! -f $host_path/loot/proof.txt || $PROOF -eq 1 &&  -f $host_path/loot/proof.txt || -z $PROOF ]] && ECHO=1
      fi
      [ $ECHO -eq 1 ] && echo -e "${hostid}:${COLOR}${host} ${hostname} ${hattrs[*]}\e[0m"
    done | sort | cut -d: -f2 | _row_neg_filter
}

function _search {
  MY_SEARCH="$1"
  grep -l -riP "$MY_SEARCH" "$XENON_HOST_ROOT" \
  | sed "s|$XENON_HOST_ROOT/||g" \
  | awk -F/ '{print $1}' \
  | sort -u
}

type "$ACTION" 1>/dev/null || exit 1
$ACTION
exit
##--------------------------------------------------------------------
######################################################################
